{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nexport default function getNewValue(value, oldValue, multiple) {\n  var newValue = null;\n\n  if (multiple) {\n    if (oldValue && !Array.isArray(oldValue)) {\n      newValue = [oldValue];\n    } else if (!oldValue) {\n      newValue = [];\n    } else {\n      newValue = _toConsumableArray(oldValue);\n    }\n\n    var valueIndex = newValue.indexOf(value);\n\n    if (valueIndex >= 0) {\n      newValue.splice(valueIndex, 1);\n    } else {\n      newValue.push(value);\n    }\n  } else {\n    newValue = value;\n  }\n\n  return newValue;\n}","map":{"version":3,"sources":["C:/OpenMonzac/node_modules/react-select-search/dist/esm/lib/getNewValue.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","getNewValue","value","oldValue","multiple","newValue","valueIndex","indexOf","splice","push"],"mappings":"AAAA,SAASA,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,IAA2BE,gBAAgB,CAACF,GAAD,CAA3C,IAAoDG,kBAAkB,EAA7E;AAAkF;;AAErH,SAASA,kBAAT,GAA8B;AAAE,QAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AAAyE;;AAEzG,SAASF,gBAAT,CAA0BG,IAA1B,EAAgC;AAAE,MAAIC,MAAM,CAACC,QAAP,IAAmBC,MAAM,CAACH,IAAD,CAAzB,IAAmCG,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BN,IAA/B,MAAyC,oBAAhF,EAAsG,OAAOO,KAAK,CAACC,IAAN,CAAWR,IAAX,CAAP;AAA0B;;AAElK,SAASJ,kBAAT,CAA4BD,GAA5B,EAAiC;AAAE,MAAIY,KAAK,CAACE,OAAN,CAAcd,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIe,CAAC,GAAG,CAAR,EAAWC,IAAI,GAAG,IAAIJ,KAAJ,CAAUZ,GAAG,CAACiB,MAAd,CAAvB,EAA8CF,CAAC,GAAGf,GAAG,CAACiB,MAAtD,EAA8DF,CAAC,EAA/D,EAAmE;AAAEC,MAAAA,IAAI,CAACD,CAAD,CAAJ,GAAUf,GAAG,CAACe,CAAD,CAAb;AAAmB;;AAAC,WAAOC,IAAP;AAAc;AAAE;;AAEtK,eAAe,SAASE,WAAT,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsCC,QAAtC,EAAgD;AAC7D,MAAIC,QAAQ,GAAG,IAAf;;AAEA,MAAID,QAAJ,EAAc;AACZ,QAAID,QAAQ,IAAI,CAACR,KAAK,CAACE,OAAN,CAAcM,QAAd,CAAjB,EAA0C;AACxCE,MAAAA,QAAQ,GAAG,CAACF,QAAD,CAAX;AACD,KAFD,MAEO,IAAI,CAACA,QAAL,EAAe;AACpBE,MAAAA,QAAQ,GAAG,EAAX;AACD,KAFM,MAEA;AACLA,MAAAA,QAAQ,GAAGvB,kBAAkB,CAACqB,QAAD,CAA7B;AACD;;AAED,QAAIG,UAAU,GAAGD,QAAQ,CAACE,OAAT,CAAiBL,KAAjB,CAAjB;;AAEA,QAAII,UAAU,IAAI,CAAlB,EAAqB;AACnBD,MAAAA,QAAQ,CAACG,MAAT,CAAgBF,UAAhB,EAA4B,CAA5B;AACD,KAFD,MAEO;AACLD,MAAAA,QAAQ,CAACI,IAAT,CAAcP,KAAd;AACD;AACF,GAhBD,MAgBO;AACLG,IAAAA,QAAQ,GAAGH,KAAX;AACD;;AAED,SAAOG,QAAP;AACD","sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nexport default function getNewValue(value, oldValue, multiple) {\n  var newValue = null;\n\n  if (multiple) {\n    if (oldValue && !Array.isArray(oldValue)) {\n      newValue = [oldValue];\n    } else if (!oldValue) {\n      newValue = [];\n    } else {\n      newValue = _toConsumableArray(oldValue);\n    }\n\n    var valueIndex = newValue.indexOf(value);\n\n    if (valueIndex >= 0) {\n      newValue.splice(valueIndex, 1);\n    } else {\n      newValue.push(value);\n    }\n  } else {\n    newValue = value;\n  }\n\n  return newValue;\n}"]},"metadata":{},"sourceType":"module"}